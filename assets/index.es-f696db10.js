var a=Object.defineProperty,u=(t,e,i)=>e in t?a(t,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[e]=i,n=(t,e,i)=>(u(t,typeof e!="symbol"?e+"":e,i),i);class h{constructor({el:e,options:i}){n(this,"el"),n(this,"options"),n(this,"timer"),n(this,"instance"),e instanceof HTMLElement?this.el=e:this.el=document.querySelector(e),this.options={wait:0,immediate:!0,...i},this.timer=null,this.el.$sizeObserver=this}init(){let e=this.options.immediate;const i=document.createEvent("HTMLEvents");i.initEvent("sizechange",!1,!1);const s=c=>{if(!e){e=!0;return}this.timer!==null&&clearTimeout(this.timer),this.timer=window.setTimeout(()=>{const{contentRect:l}=c&&c[0];i.contentRect=l,this.el.dispatchEvent(i)},this.options.wait)};this.instance=new ResizeObserver(s),this.instance.observe(this.el)}destroy(){var e;(e=this.instance)==null||e.unobserve(this.el)}}const r=(t,e,i)=>{const{value:s}=e,l={...i||{},...s};new h({el:t,options:l}).init()},o=t=>{t.$sizeObserver&&t.$sizeObserver.destroy()},d={mounted:(t,e)=>r(t,e),unmounted:o,inserted:(t,e)=>r(t,e),unbind:o,install:(t,e)=>{t.directive("SizeObserver",{mounted:(i,s)=>r(i,s,e),unmounted:o,inserted:(i,s)=>r(i,s,e),unbind:o})}};export{d as S};
